<shaders>
<shader name="Peter Flip HUD">
        <parameters>
        </parameters>
        <vertex><![CDATA[
            attribute vec3 Position;
            attribute vec4 Color;
            attribute vec2 TexCoord;
            varying vec4 Color0;
            varying vec2 TexCoord0;
            uniform mat4 Transform;
            void main(void) {
                Color0 = Color;
                TexCoord0 = TexCoord;
                gl_Position = Transform * vec4(Position.xyz, 1.0);
            }
        ]]></vertex>
        <fragment><![CDATA[
            varying lowp vec4 Color0;
            varying mediump vec2 TexCoord0;
            uniform sampler2D Texture0;
            void main(void) {
                vec4 Color = Color0 * texture2D(Texture0, TexCoord0);
                gl_FragColor = Color;
            }
        ]]></fragment>
    </shader>
    <shader name="Peter Flip">
        <parameters>
            <param name="FlipFactor" type="float" />
        </parameters>
        <vertex>
            <![CDATA[
            attribute vec3 Position;
            attribute vec4 Color;
            attribute vec2 TexCoord;
            attribute vec4 RenderData;
            attribute float Scale;
            varying vec4 Color0;
            varying vec2 TexCoord0;
            varying vec4 RenderDataOut;
            varying float ScaleOut;
			attribute float FlipFactor;
			varying float FlipFactorOut;
            uniform mat4 Transform;
            void main(void)
            {
                RenderDataOut = RenderData;
                ScaleOut = Scale;         // Passing data to fragment shader

				FlipFactorOut = FlipFactor;

                Color0 = Color;
                TexCoord0 = TexCoord;
                gl_Position = Transform * vec4(Position.xyz, 1.0);
            }
        ]]></vertex>
        <fragment>
            <![CDATA[#version 150
            varying lowp vec4 Color0;
            varying mediump vec2 TexCoord0;
            varying lowp vec4 RenderDataOut;
            varying lowp float ScaleOut;
			varying lowp float FlipFactorOut;

            uniform sampler2D Texture0;

            void main(void)
            {
				vec2 uv=TexCoord0*(RenderDataOut.zw/RenderDataOut.xy);
				uv.y = (1.0-FlipFactorOut)*uv.y + (1.0-uv.y)*FlipFactorOut;
				vec2 out_tex_coord=uv/(RenderDataOut.zw/RenderDataOut.xy);
                vec4 Color = Color0 * texture2D(Texture0, out_tex_coord );
				float MirrorFactor = 1 * (1 - FlipFactorOut) + 0.7 * FlipFactorOut;
                Color.r *= 1.0f + FlipFactorOut;
                Color.g *= 1.0f - (FlipFactorOut * 0.225f);
                Color.b *= 1.0f - (FlipFactorOut * 0.225f);
                gl_FragColor = Color*MirrorFactor;
            }
        ]]></fragment>
    </shader>
	 <shader name="AltF4PowerDown">
         <parameters>
            <param name="PowerValue" type="float" />
        </parameters>
        <vertex><![CDATA[
            attribute vec3 Position;
            attribute vec4 Color;
            attribute vec2 TexCoord;
			attribute float PowerValue;
            varying vec4 Color0;
            varying vec2 TexCoord0;
			varying float PowerValue0;
            uniform mat4 Transform;
            void main(void) {
                Color0 = Color;
                TexCoord0 = TexCoord;
				PowerValue0 = PowerValue;
                gl_Position = Transform * vec4(Position.xyz, 1.0);
            }
        ]]></vertex>
        <fragment><![CDATA[
            varying lowp vec4 Color0;
            varying mediump vec2 TexCoord0;
			varying lowp float PowerValue0;
            uniform sampler2D Texture0;
            void main(void) {
                vec4 Color = Color0 * texture2D(Texture0, TexCoord0);
				Color.r *= 1.0f - PowerValue0;
				Color.g *= 1.0f - PowerValue0;
				Color.b *= 1.0f - PowerValue0;
                gl_FragColor = Color;
            }
        ]]></fragment>
    </shader>
</shaders>
